// <auto-generated />
using System;
using DeviceMaintanace.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeviceMaintanace.DAL.Migrations
{
    [DbContext(typeof(DeviceMaintanaceContext))]
    [Migration("20231017114444_addHistoryTable")]
    partial class addHistoryTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DeviceMaintanace.Tables.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.BrancheDepartment", b =>
                {
                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("BranchId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("BrancheDepartments");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Dead", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeviceDetailId")
                        .HasColumnType("int");

                    b.Property<string>("FIRSTMEMBER")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ITLEADER")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SECONDMEMBER")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("mobilePhone")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceDetailId");

                    b.HasIndex("FIRSTMEMBER");

                    b.HasIndex("ITLEADER");

                    b.HasIndex("SECONDMEMBER");

                    b.HasIndex("mobilePhone");

                    b.ToTable("Deads");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Device", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeviceModel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeviceTypeId")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("DeviceTypeId")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.DeviceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("BackToDevices")
                        .HasColumnType("bit");

                    b.Property<string>("EmployeeMobilePhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EnteryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItEmployeeMobilePhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProblemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeMobilePhone");

                    b.HasIndex("ItEmployeeMobilePhone");

                    b.ToTable("DeviceDetails");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.DeviceStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DeviceStatuses");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("deviceTypes");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Employee", b =>
                {
                    b.Property<string>("MobilePhone")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BrancheDepartmentId1")
                        .HasColumnType("int");

                    b.Property<int>("BrancheDepartmentId2")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MobilePhone");

                    b.HasIndex("BrancheDepartmentId1", "BrancheDepartmentId2");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.History", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DeadId")
                        .HasColumnType("int");

                    b.Property<int>("MaintananceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeadId");

                    b.HasIndex("MaintananceId");

                    b.ToTable("Histories");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Maintanance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompanyDelivaryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CompanyReturnedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DeliverToEmployeeStatus")
                        .HasColumnType("bit");

                    b.Property<bool>("DeviceDeliveredCompletelyToCompany")
                        .HasColumnType("bit");

                    b.Property<int>("DeviceDetailId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EmployeeDelivaryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeMobileNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItEmployeeFromCompany")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItEmployeeMaintainer")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItEmployeeToCompany")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ItEmployeeToEmployee")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SolutionDescribtion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhatWasDeliveredToCompany")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("checkGoToDead")
                        .HasColumnType("bit");

                    b.Property<bool>("checkReturnedFromExternalCompany")
                        .HasColumnType("bit");

                    b.Property<bool>("maintanceDoneInsideOffice")
                        .HasColumnType("bit");

                    b.Property<string>("warrantyCompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DeviceDetailId");

                    b.HasIndex("DeviceStatusId");

                    b.HasIndex("EmployeeMobileNumber");

                    b.HasIndex("ItEmployeeFromCompany");

                    b.HasIndex("ItEmployeeMaintainer");

                    b.HasIndex("ItEmployeeToCompany");

                    b.HasIndex("ItEmployeeToEmployee");

                    b.ToTable("Maintanances");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.BrancheDepartment", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.Branch", "Branch")
                        .WithMany("BranchesDepartments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceMaintanace.Tables.Department", "Department")
                        .WithMany("BranchesDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Dead", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.DeviceDetail", "DeviceDetail")
                        .WithMany()
                        .HasForeignKey("DeviceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceMaintanace.Tables.Employee", "EmployeeFIRSTMEMBER")
                        .WithMany()
                        .HasForeignKey("FIRSTMEMBER");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "EmployeeITLEADER")
                        .WithMany()
                        .HasForeignKey("ITLEADER");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "EmployeeSECONDMEMBER")
                        .WithMany()
                        .HasForeignKey("SECONDMEMBER");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("mobilePhone");

                    b.Navigation("DeviceDetail");

                    b.Navigation("Employee");

                    b.Navigation("EmployeeFIRSTMEMBER");

                    b.Navigation("EmployeeITLEADER");

                    b.Navigation("EmployeeSECONDMEMBER");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Device", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.DeviceType", "DeviceType")
                        .WithOne("Device")
                        .HasForeignKey("DeviceMaintanace.Tables.Device", "DeviceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DeviceType");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.DeviceDetail", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeMobilePhone");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "ItEmployee")
                        .WithMany()
                        .HasForeignKey("ItEmployeeMobilePhone");

                    b.Navigation("Employee");

                    b.Navigation("ItEmployee");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Employee", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.BrancheDepartment", "BrancheDepartment")
                        .WithMany()
                        .HasForeignKey("BrancheDepartmentId1", "BrancheDepartmentId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrancheDepartment");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.History", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.Dead", "Dead")
                        .WithMany()
                        .HasForeignKey("DeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceMaintanace.Tables.Maintanance", "Maintanance")
                        .WithMany()
                        .HasForeignKey("MaintananceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dead");

                    b.Navigation("Maintanance");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Maintanance", b =>
                {
                    b.HasOne("DeviceMaintanace.Tables.DeviceDetail", "DeviceDetail")
                        .WithMany()
                        .HasForeignKey("DeviceDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceMaintanace.Tables.DeviceStatus", "DeviceStatus")
                        .WithMany()
                        .HasForeignKey("DeviceStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DeviceMaintanace.Tables.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeMobileNumber");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "ItEmployeeFC")
                        .WithMany()
                        .HasForeignKey("ItEmployeeFromCompany");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "ItMaintainer")
                        .WithMany()
                        .HasForeignKey("ItEmployeeMaintainer");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "ItEmployeeTC")
                        .WithMany()
                        .HasForeignKey("ItEmployeeToCompany");

                    b.HasOne("DeviceMaintanace.Tables.Employee", "ItEmployeeTE")
                        .WithMany()
                        .HasForeignKey("ItEmployeeToEmployee");

                    b.Navigation("DeviceDetail");

                    b.Navigation("DeviceStatus");

                    b.Navigation("Employee");

                    b.Navigation("ItEmployeeFC");

                    b.Navigation("ItEmployeeTC");

                    b.Navigation("ItEmployeeTE");

                    b.Navigation("ItMaintainer");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Branch", b =>
                {
                    b.Navigation("BranchesDepartments");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.Department", b =>
                {
                    b.Navigation("BranchesDepartments");
                });

            modelBuilder.Entity("DeviceMaintanace.Tables.DeviceType", b =>
                {
                    b.Navigation("Device");
                });
#pragma warning restore 612, 618
        }
    }
}
